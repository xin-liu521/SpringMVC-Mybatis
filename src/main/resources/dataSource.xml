<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <context:component-scan base-package="com.infoyb">
        <!--不扫描Controller包-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <task:annotation-driven/>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:jdbc.properties</value>
        </property>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="maxWait" value="${jdbc.maxWait}" />
        <property name="minIdle" value="${jdbc.minIdle}" />

        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
        <!--打开removeAbandoned功能-->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
        <!--1800秒，也就是30分钟-->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
        <!--关闭abanded连接时输出错误日志-->
        <property name="logAbandoned" value="${jdbc.logAbandoned}" />
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
        <!-- 监控统计拦截的filters -->
        <!-- 并在filters属性中配置了log4j -->

        <!-- 并在filters属性中配置了log4j，ref中的bean是下面拦截器的配置 -->
        <!-- proxyFilters和filters是组合关系,前者是根据bean配置,后者根据别名配置的-->
        <!-- stat是statfilter的别名,log4j是logFilter的别名-->
        <!-- 监控统计拦截的filters,日志记录,这里开启了stat,wall（sql翻过墙过滤监控）,log4j（log4j的监控）配置 -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <!--<ref bean="log-filter" />-->
                <!-- 防SQL注入攻击检查不包含在统计时间内 -->
                <ref bean="wall-filter" />
            </list>
        </property>
        <!--<property name="filters" value="${jdbc.filters}" />-->
    </bean>

    <!--慢SQL记录统计 start-->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--慢SQL统计，如果SQL执行时间超过一定时间则记录为慢SQL  1秒-->
        <property name="slowSqlMillis" value="1000" />
        <!--慢SQL统计日志输出  -->
        <property name="logSlowSql" value="true" />
        <!--合并SQL统计 例如select * from table t where t.id =1，会被变为select * from table t where t.id =？来统计  -->
        <property name="mergeSql" value="true" />
    </bean>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
         <property name="resultSetLogEnabled" value="false" />
         <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

    <!-- 防SQL注入攻击 -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="oracle" />
        <property name="config" ref="wall-filter-config" />
    </bean>

    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig">
        <property name="multiStatementAllow" value="true" />
    </bean>

    <!--慢SQL记录统计 end-->


    <!-- spring bean 和数据源关联监控 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.infoyb.*.service.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>


    <!-- spring与mybatis整合配置，扫描所有dao-->
    <!-- mybatis 通用 mapper 整合-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.infoyb"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="markerInterface" value="com.infoyb.supplier.common.dao.BaseDao"/>
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 -->
        <property name="properties">
            <value>
                ORDER=BEFORE
            </value>
        </property>
    </bean>




    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation">
                <value>classpath:/mybatis-config.xml</value>
        </property>

        <property name="mapperLocations">
                <value>classpath*:mappers/*/*.xml</value>
        </property>
    </bean>
    <!-- configLocation为mybatis属性 mapperLocations为所有mapper-->



    <!-- 对数据源进行事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="add*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="insert*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="update*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="del*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="save*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="exec*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="edit*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="create*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>
            <tx:method name="generate*" rollback-for="com.infoyb.supplier.common.exception.RRException,java.lang.Exception"/>

            <tx:method name="query*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务-->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod" expression=" execution(* com.infoyb.supplier.*.service..*ServiceImpl.*(..))" />
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
    </aop:config>

</beans>
