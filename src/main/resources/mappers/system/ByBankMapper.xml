<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.infoyb.supplier.system.dao.ByBankDao">
  <resultMap id="BaseResultMap" type="com.infoyb.supplier.system.model.ByBank">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="BASE_ID" jdbcType="BIGINT" property="baseId" />
    <result column="BANK_ACCOUNT" jdbcType="VARCHAR" property="bankAccount" />
    <result column="BANK_TYPE" jdbcType="VARCHAR" property="bankType" />
    <result column="BANK_ACCOUNT_NAME" jdbcType="VARCHAR" property="bankAccountName" />
    <result column="DEPOSIT_BANK" jdbcType="BIGINT" property="depositBank" />
    <result column="BANK_COUNTRY" jdbcType="VARCHAR" property="bankCountry" />
    <result column="ASSOCIATED_NUMBER" jdbcType="VARCHAR" property="associatedNumber" />
    <result column="CURRENCY_TYPE" jdbcType="VARCHAR" property="currencyType" />
    <result column="OTHER_BANK" jdbcType="VARCHAR" property="otherBank" />
    <result column="BANK_TYPE_NAME" jdbcType="VARCHAR" property="bankTypeName" />
    <result column="DEPOSIT_BANK_NAME" jdbcType="VARCHAR" property="depositBankName" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="CREATE_USER_ID" jdbcType="BIGINT" property="createUserId" />
    <result column="COMPANY_TYPE" jdbcType="INTEGER" property="companyType" />
    <result column="IS_ELECTRON_ACCOUNT" jdbcType="INTEGER" property="isElectronAccount" />
    <result column="ACCOUNT_PROPERTIES" jdbcType="INTEGER" property="accountProperties" />
    <result column="IS_BASE_ACCOUNT" jdbcType="INTEGER" property="isBaseAccount" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    ID, BASE_ID, BANK_ACCOUNT, BANK_TYPE, BANK_ACCOUNT_NAME, DEPOSIT_BANK, BANK_COUNTRY, 
    ASSOCIATED_NUMBER, CURRENCY_TYPE, OTHER_BANK, BANK_TYPE_NAME, DEPOSIT_BANK_NAME, 
    CREATE_TIME, CREATE_USER_ID, COMPANY_TYPE, IS_ELECTRON_ACCOUNT, ACCOUNT_PROPERTIES,IS_BASE_ACCOUNT
  </sql>

  <!-- 删除对应的附件 -->
  <delete id="deleteByBank" parameterType="map">
    DELETE FROM BY_BANK T
    WHERE T.ID IN
    <foreach collection="idsList" item="item"  open="(" separator="," close=")">
      #{item}
    </foreach>
  </delete>


  <!-- 保存通知附件 -->
  <insert id="insertBatchBank" parameterType="list" useGeneratedKeys="false">
    INSERT INTO BY_BANK (
    ID
    ,BASE_ID
    ,BANK_ACCOUNT
    ,BANK_TYPE
    ,BANK_ACCOUNT_NAME
    ,DEPOSIT_BANK
    ,BANK_COUNTRY
    ,ASSOCIATED_NUMBER
    ,CURRENCY_TYPE
    ,OTHER_BANK
    ,BANK_TYPE_NAME
    ,DEPOSIT_BANK_NAME
    ,CREATE_TIME
    ,CREATE_USER_ID
    ,COMPANY_TYPE
    ,IS_ELECTRON_ACCOUNT
    ,ACCOUNT_PROPERTIES
    ,IS_BASE_ACCOUNT
    ) SELECT BY_BANK_SEQ.NEXTVAL
    ,T.BASE_ID
    ,T.BANK_ACCOUNT
    ,T.BANK_TYPE
    ,T.BANK_ACCOUNT_NAME
    ,T.DEPOSIT_BANK
    ,T.BANK_COUNTRY
    ,T.ASSOCIATED_NUMBER
    ,T.CURRENCY_TYPE
    ,T.OTHER_BANK
    ,T.BANK_TYPE_NAME
    ,T.DEPOSIT_BANK_NAME
    ,T.CREATE_TIME
    ,T.CREATE_USER_ID
    ,T.COMPANY_TYPE
    ,T.IS_ELECTRON_ACCOUNT
    ,T.ACCOUNT_PROPERTIES
    ,T.IS_BASE_ACCOUNT
    FROM (
    <foreach item="doc" collection="list" separator="UNION ALL" index="index">
      SELECT
      #{doc.baseId, jdbcType=BIGINT} AS BASE_ID
      ,#{doc.bankAccount, jdbcType=VARCHAR} AS BANK_ACCOUNT
      ,#{doc.bankType, jdbcType=VARCHAR} AS BANK_TYPE
      ,#{doc.bankAccountName, jdbcType=VARCHAR} AS BANK_ACCOUNT_NAME
      ,#{doc.depositBank, jdbcType=BIGINT} AS DEPOSIT_BANK
      ,#{doc.bankCountry, jdbcType=VARCHAR} AS BANK_COUNTRY
      ,#{doc.associatedNumber, jdbcType=VARCHAR} AS ASSOCIATED_NUMBER
      ,#{doc.currencyType, jdbcType=VARCHAR} AS CURRENCY_TYPE
      ,#{doc.otherBank, jdbcType=VARCHAR} AS OTHER_BANK
      ,#{doc.bankTypeName, jdbcType=VARCHAR} AS BANK_TYPE_NAME
      ,#{doc.depositBankName, jdbcType=VARCHAR} AS DEPOSIT_BANK_NAME
      ,#{doc.createTime, jdbcType=TIMESTAMP} AS CREATE_TIME
      ,#{doc.createUserId, jdbcType=BIGINT} AS CREATE_USER_ID
      ,#{doc.companyType, jdbcType=INTEGER} AS COMPANY_TYPE
      ,#{doc.isElectronAccount, jdbcType=INTEGER} AS IS_ELECTRON_ACCOUNT
      ,#{doc.accountProperties, jdbcType=INTEGER} AS ACCOUNT_PROPERTIES
      ,#{doc.isBaseAccount, jdbcType=INTEGER} AS IS_BASE_ACCOUNT
      FROM DUAL
    </foreach>
    ) T
  </insert>
  <update id="updateBatchBank" parameterType="list" >
    <foreach collection="list" item="item" open="begin" close=";end;" separator=";" index="index">
      UPDATE BY_BANK
      <set>
        <if test="item.bankAccount != null">
          BANK_ACCOUNT =#{item.bankAccount},
        </if>
        <if test="item.bankType != null">
          BANK_TYPE =#{item.bankType},
        </if>
        <if test="item.bankTypeName != null ">
          BANK_TYPE_NAME =#{item.bankTypeName},
        </if>
        <if test="item.bankAccountName != null ">
          BANK_ACCOUNT_NAME =#{item.bankAccountName},
        </if>
        <if test="item.depositBank != null">
          DEPOSIT_BANK =#{item.depositBank},
        </if>
        <if test="item.associatedNumber != null ">
          ASSOCIATED_NUMBER =#{item.associatedNumber},
        </if>
        <if test="item.currencyType != null ">
          CURRENCY_TYPE =#{item.currencyType},
        </if>
        <if test="item.otherBank != null">
          OTHER_BANK =#{item.otherBank},
        </if>

        <if test="item.depositBankName != null">
          DEPOSIT_BANK_NAME =#{item.depositBankName},
        </if>
        <if test="item.bankCountry != null">
          BANK_COUNTRY =#{item.bankCountry},
        </if>
        <if test="item.isElectronAccount != null">
          IS_ELECTRON_ACCOUNT =#{item.isElectronAccount},
        </if>
        <if test="item.accountProperties != null">
          ACCOUNT_PROPERTIES =#{item.accountProperties},
        </if>
      </set>
      where ID =#{item.id}
    </foreach>
  </update>
  <!--搜索银行类别-->
  <select id="selectByBankTypeName" resultType="map" parameterType="string">
    SELECT ID, CODE_NAME, CODE FROM BANK_TYPE WHERE CODE_NAME LIKE '%'|| #{bankTypeName, jdbcType=VARCHAR}||'%'
  </select>

  <!--查询开户银行-->
  <select id="selectCodeName" parameterType="string" resultType="map">
    SELECT BANK_ID, BANK_NAME, BANK_CODE FROM CODE_BANK WHERE BANK_TYPE  =#{bankCode, jdbcType=VARCHAR}
  </select>

  <resultMap id="bankResultMap" type="com.infoyb.supplier.system.model.ByBank">
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="BASE_ID" jdbcType="BIGINT" property="baseId" />
    <result column="BANK_ACCOUNT" jdbcType="VARCHAR" property="bankAccount" />
    <result column="BANK_TYPE" jdbcType="VARCHAR" property="bankType" />
    <result column="BANK_ACCOUNT_NAME" jdbcType="VARCHAR" property="bankAccountName" />
    <result column="DEPOSIT_BANK" jdbcType="BIGINT" property="depositBank" />
    <result column="BANK_COUNTRY" jdbcType="VARCHAR" property="bankCountry" />
    <result column="ASSOCIATED_NUMBER" jdbcType="VARCHAR" property="associatedNumber" />
    <result column="CURRENCY_TYPE" jdbcType="VARCHAR" property="currencyType" />
    <result column="OTHER_BANK" jdbcType="VARCHAR" property="otherBank" />
    <result column="BANK_TYPE_NAME" jdbcType="VARCHAR" property="bankTypeName" />
    <result column="DEPOSIT_BANK_NAME" jdbcType="VARCHAR" property="depositBankName" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="CREATE_USER_ID" jdbcType="BIGINT" property="createUserId" />
    <result column="COMPANY_TYPE" jdbcType="INTEGER" property="companyType" />
    <result column="IS_ELECTRON_ACCOUNT" jdbcType="INTEGER" property="isElectronAccount" />
    <result column="ACCOUNT_PROPERTIES" jdbcType="INTEGER" property="accountProperties" />
    <result column="IS_BASE_ACCOUNT" jdbcType="INTEGER" property="isBaseAccount" />

    <collection property="sysCodeList" ofType="com.infoyb.supplier.system.model.SysCode">
      <id column="CODE_ID" jdbcType="VARCHAR" property="codeId" />
      <result column="CODE_NAME" jdbcType="VARCHAR" property="codeName" />
      <result column="CODE_NAME_ID" jdbcType="VARCHAR" property="codeNameId" />
    </collection>
  </resultMap>

  <!--查询银行信息-->
  <select id="selectBankList" parameterType="map" resultMap="bankResultMap">
    SELECT
    b.ID,
    b.BASE_ID,
    b.BANK_ACCOUNT,
    b.BANK_TYPE,
    b.BANK_ACCOUNT_NAME,
    b.DEPOSIT_BANK,
    b.BANK_COUNTRY,
    b.ASSOCIATED_NUMBER,
    b.CURRENCY_TYPE,
    b.OTHER_BANK,
    b.BANK_TYPE_NAME,
    b.DEPOSIT_BANK_NAME,
    b.CREATE_TIME,
    b.CREATE_USER_ID,
    b.COMPANY_TYPE,
    b.IS_ELECTRON_ACCOUNT,
    b.ACCOUNT_PROPERTIES,
    b.IS_BASE_ACCOUNT,
    s.BANK_ID,
    s.BANK_CODE,
    s.BANK_NAME
    FROM BY_BANK b LEFT JOIN CODE_BANK s ON b.BANK_TYPE = s.BANK_TYPE
    <where>
      <if test="baseId != null">
        AND  BASE_ID =#{baseId, jdbcType=BIGINT}
      </if>
      <if test="companyType != null">
        AND  COMPANY_TYPE =#{companyType, jdbcType=INTEGER}
      </if>
    </where>
    ORDER BY b.IS_BASE_ACCOUNT ASC
  </select>

  <select id="selectByDepositBankName" parameterType="map" resultType="map">
    SELECT BANK_ID, BANK_CODE, BANK_NAME FROM CODE_BANK
    WHERE BANK_NAME LIKE '%' || #{bankName, jdbcType=VARCHAR} || '%' AND BANK_TYPE =#{bankType, jdbcType=VARCHAR}
  </select>

  <select id="selectOutBank" parameterType="string" resultType="string">
    SELECT BANK_ID FROM CODE_BANK WHERE BANK_CODE = #{depositBank}
  </select>

  <insert id="insertOutBank" parameterType="map" useGeneratedKeys="true" keyProperty="id">
    <selectKey keyProperty="id" order="BEFORE" resultType="string" >
      select CODE_OUTUNIT_BANK_SEQ.nextval from dual
    </selectKey>
    INSERT INTO code_outunit_bank
    (ID,UNIT_ID,BANK_ID,BANK_ACCOUNT,BANK_ACCOUNT_NAME,ACCOUNT_PROPERTIES,IS_BASE_ACCOUNT,STATUS)
    values
    (#{id, jdbcType=VARCHAR},#{unitId, jdbcType=VARCHAR},#{bankId, jdbcType=VARCHAR},
    #{bankAccount, jdbcType=VARCHAR},#{bankAccountName, jdbcType=VARCHAR},#{accountProperties, jdbcType=INTEGER},
    #{isBaseAccount, jdbcType=INTEGER}, #{status, jdbcType=INTEGER})
  </insert>

  <delete id="deleteOutBank" parameterType="map" >
    DELETE code_outunit_bank WHERE BANK_ID =#{bankId, jdbcType=VARCHAR}
  </delete>
</mapper>